package java1.e클래스;

public class Ex1_실행 {
	
	public static void main(String[] args) {
		
	// 1. 클래스 기반으로 객체를 선언
		// 1. 클래스명 : 객체 생성시 사용되는 설계도
		// 2. 변수명 : 객체이름으로 사용할 임의로 정하기
		// 3. new 연산자 : 힙영역에 메모리할당후 주소값을 스택영역 할당
		// 4. 생성자명 : 객체 생성시 초기값 담당[ 클래스명과 동일 ]
	Student s1 = new Student();
	//  1 	2  =  3   4  
	// 스택영역 = 힙 영역
	System.out.println("s1 변수가 Student 객체를 참조합니다. ");
	
	Student s2 = new Student();
	System.out.println("s2 변수가 Student 객체를 참조합니다. ");
	
	
	
	/*
	 	!! : 동일한 클래스로 객체 선언시 서로 객체[주소가 다름 = 메모리가 다름]가 생성
	 */
	}
}

/*
	자바 메모리 JVM [ 자바 가상머신 ]
	
	메모리 영역
		1. 메소드 영역
			- 클래스별 정적필드,상수,메소드코드,생성자등 저장
		2. 힙 영역
			- 객체와 배열이 생성되는 영역
			- 스택 영역의 변수나 다른 객체의 필드에서 참조합니다.
			- * 객체가 null 이면 자동으로 객체 제거 [ 직접 제거 불가능 ]
		3. 스택 영역
			- 기본타입의 데이터는 값이 저장
			- 참조타입의 데이터는 주소값을 저장
	메소드 영역 : 클래스 로더(클래스를 읽어올때) 된 정보 저장
		클래스1
		
	스택 영역		------------> 	힙 영역
		name: 주소[100번지]------------>  100번지 = "신용권"
		age : 39 		기본타입X
		hobby : 주소[200번지]----------> 200번지 = "독서"
		price: 3590	기본타입X

	1. 기본타입 : 자료형 [ byte, char, short, int, long, float, double ]
		int age = 25;

	2. 참조타입 : 배열,열거,클래스,인터페이스
		String name = new String("신용권")

	== : 스택내 비교 연산자 [ 스택영역 비교 ]
		int age1 = 40	[ 힙영역X]
		int age2 = 40	[스택영역만 사용]
			age1 == age2
		String name1 = new String("강호동")	[ 힙영역 사용 ]
		String name2 = new String("강호동")
			name1 == name2	
			* 객체내 데이터가 동일하더라도 주소는 다르다.
			* equals 메소드 ( 객체 비교 메소드 )


- 자바 저장하는 메모리 문법
	1. 변수 [ 스택 영역]
		1. 기본타입 : 값 저장		[ == ]
		2. 참조타입 : 힙의 주소저장	[ .equals ]
			
	2. 배열 [ 힙 영역 ]
		
	3. 객체 [ 힙 영역 ]
		1. 실제 데이터 저장되는 위치
		2. 저장되는 위치[ 주소값 ]를 변수에 저장한다.
- 용어
	1. 클래스	      : 미리메모리(필드, 메소드) 설계도 [ * 목적 : 빠른개발등 ]
	2. 인스턴스화  : 클래스 기반으로 변수에 메모리 할당하는 과정 [ 작업 ] [ new연산자 ]
	3. 인스턴스     : 클래스 기반으로 생성된 실제 메모리 
	4. 객체	      : 클래스(설계도) + 인스턴스
		* 클래스 기반으로 new 연산자 사용하면 객체
	5. 변수	      : 클래스
		* 힙영역이 생성되기 전 / 1. 기본타입 2. null
		클래스명 변수명;    		    : 인스턴스화 전 변수
		클래스명 변수명 = new 클래스()   :  인스턴스화 후 객체 
*/